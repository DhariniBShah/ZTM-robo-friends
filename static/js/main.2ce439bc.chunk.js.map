{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.jsx","actions.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","cardsArray","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkmiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2ce439bc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots  = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nexport const requestRobots = (state =initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots:action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error:action.payload, isPending: false });        \r\n        default:\r\n            return state;  \r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return(\r\n        <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src = { `https://robohash.org/${id}?size=200x200` } alt = 'profileImage'/>\r\n            <div>\r\n                <h2>{ name }</h2>\r\n                <p>{ email }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n    const cardsArray = robots.map( robot => {\r\n        return (\r\n            <Card\r\n                key = { robot.id } \r\n                id = { robot.id } \r\n                name = { robot.name } \r\n                email = { robot.email }   \r\n            />\r\n        );\r\n    })\r\n    return(\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList; ","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className = 'pa1'>\r\n            <input\r\n            className = 'pa3 ba2 b--green bg-lightest-blue' \r\n            type = 'search' \r\n            placeholder = 'search robots'\r\n            onChange = { searchChange }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflowY: 'scroll' , border: '1px solid white', height: '500px' }}>\r\n            { props.children }\r\n        </div>\r\n    );    \r\n};\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error , info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError) {\r\n            return <h2>Oops. That is not good!</h2>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React ,  { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount(){\r\n       this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return (\r\n                robot.name.toLowerCase()\r\n                .includes(searchField.toLowerCase())\r\n            );\r\n        })\r\n        return isPending ? \r\n            <h2>Loading...</h2> :\r\n            (\r\n                <div className = 'tc'>\r\n                    <h1 className = 'f1'>Robo Friends</h1>\r\n                    <SearchBox searchChange = { onSearchChange } />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots = { filteredRobots }/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );     \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }))\r\n    .catch(error => dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n    }))\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkmiddleware from 'redux-thunk';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons';\nimport App from './containers/App';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst store = createStore(rootReducer, \n  applyMiddleware(thunkmiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = { store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}